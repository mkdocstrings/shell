{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"mkdocstrings-shell","text":"<p>A shell scripts/libraries handler for mkdocstrings. It uses Shellman to collect documentation from shell scripts.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mkdocstrings-shell\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>In MkDocs configuration file:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    default_handler: shell  # optional\n</code></pre> <p>The handler does not offer any option yet.</p>"},{"location":"#usage","title":"Usage","text":"<p>Use mkdocstrings syntax to inject documentation for a script:</p> <pre><code>::: relative/path/to/script\n    handler: shell  \n</code></pre> <p>Specifying <code>handler: shell</code> is optional if you declared <code>shell</code> as default handler in mkdocs.yml.</p>"},{"location":"#example","title":"Example","text":"<p>Let say we have a script called <code>drag</code> in a scripts folder, enabling a drag-drop feature on the command-line.</p> View the script's contents: <pre><code>#!/bin/bash\n\n## \\author Timoth\u00e9e Mazzucotelli / @pawamoy &lt;dev@pawamoy.fr&gt;\n\n## \\brief Save file paths in a buffer to move them somewhere else.\n## \\desc This tool lets you save file paths into a buffer before moving or copying\n## them somewhere else. It acts like a drag-and-drop utility but for the command-line.\n## It can be useful when you don't want to type the entire destination path and\n## proceed in three or more steps instead, using shortcut commands to move around your\n## filesystem, dragging files from multiple directories.\n\n## \\example Drag files from multiple directories, drop them in another:\n## \\example-code bash\n##   cd ~/Documents\n##   drag ThisPlaylist.s3u\n##   cd ../Downloads\n##   drag ThisTrack.ogg AndThisVideo.mp4\n##   drag --drop ../project\n## \\example-description\n## In this example, we simply move around in the filesystem, picking files in\n## each of these directories. At the end, we drop them all in a specific\n## directory.\n\n## \\example Define a convenient `drop` alias:\n## \\example-code bash\n##   alias drop='drag -d'\n##   drag file.txt\n##   cd /somewhere/else\n##   drop\n## \\example-description\n## In this example, we define a `drop` alias that allows us to actually\n## run `drag` then `drop` (instead of `drag --drop`).\n\n## \\exit 1 No arguments provided.\n\nif [ $# -eq 0 ]; then\n  shellman \"$0\"\n  exit 1\nfi\n\ndata_file=\"/tmp/dragdrop\"\n\ndrop() {\n  local dir=\"${2:-.}\"\n  local drop=$1\n  [ ! -f \"${data_file}\" ] &amp;&amp; { echo \"drag (drop): no files list\" &gt;&amp;2; exit 0; }\n  while read -r f; do\n    $drop -v \"$f\" \"${dir}\"\n  done &lt; \"${data_file}\"\n  rm \"${data_file}\"\n}\n\nmain() {\n  case $1 in\n    ## \\option -h, --help\n    ## Print this help and exit.\n    -h|--help) shellman \"$0\"; exit 0 ;;\n    ## \\option -d, --drop [DIR]\n    ## Drop the remembered files in the specified directory\n    ## (defaul: current directory).\n    -d|--drop)\n      drop mv \"$2\"\n      exit 0\n    ;;\n    ## \\option -p, --copy [DIR]\n    ## Copy (instead of move) the dragged files in the specified directory\n    ## (defaul: current directory).\n    -p|--copy)\n      drop cp \"$2\"\n      exit 0\n    ;;\n    ## \\option -c, --clean\n    ## Clean the currently dragged files list (this option does not delete any file).\n    -c|--clean)\n      rm \"${data_file}\" 2&gt;/dev/null\n      exit 0\n    ;;\n    ## \\option -l, --list\n    ## List the currently dragged files.\n    -l|--list)\n      cat \"${data_file}\" 2&gt;/dev/null\n      exit 0\n    ;;\n  esac\n\n  for f; do\n    if [ \"${f:0:1}\" = \"/\" ]; then\n      echo \"$f\" &gt;&gt; \"${data_file}\"\n    else\n      echo \"${PWD}/$f\" &gt;&gt; \"${data_file}\"\n    fi\n  done\n}\n\n## \\usage drag FILES\n## \\usage drag -d|-p [DIR]\n## \\usage drag -c|-l\nmain \"$@\"\n</code></pre> <p>The documentation syntax used in this script is documented here: https://pawamoy.github.io/shellman/usage/syntax/.</p> <p>We can inject documentation for our script using this markup:</p> <pre><code>::: scripts/drag\n    handler: shell\n</code></pre> <p>...which would render the following documentation:</p>"},{"location":"#drag","title":"drag","text":"<p>Save file paths in a buffer to move them somewhere else.</p> Usage <pre><code>drag FILES</code></pre> <pre><code>drag -d|-p [DIR]</code></pre> <pre><code>drag -c|-l</code></pre> Description <p>This tool lets you save file paths into a buffer before moving or copying them somewhere else. It acts like a drag-and-drop utility but for the command-line. It can be useful when you don't want to type the entire destination path and proceed in three or more steps instead, using shortcut commands to move around your filesystem, dragging files from multiple directories.</p> Options <ul> <li> <code>-h</code>, <code>--help</code>:            <p>Print this help and exit.</p> </li> <li> <code>-d</code>, <code>--drop</code><code>[DIR]</code>:            <p>Drop the remembered files in the specified directory (defaul: current directory).</p> </li> <li> <code>-p</code>, <code>--copy</code><code>[DIR]</code>:            <p>Copy (instead of move) the dragged files in the specified directory (defaul: current directory).</p> </li> <li> <code>-c</code>, <code>--clean</code>:            <p>Clean the currently dragged files list (this option does not delete any file).</p> </li> <li> <code>-l</code>, <code>--list</code>:            <p>List the currently dragged files.</p> </li> </ul> Exit Status <ul> <li> <code>1</code>:          <p>No arguments provided.</p> </li> </ul> Examples <p>Drag files from multiple directories, drop them in another:</p> <pre><code>cd ~/Documents\ndrag ThisPlaylist.s3u\ncd ../Downloads\ndrag ThisTrack.ogg AndThisVideo.mp4\ndrag --drop ../project\n</code></pre> <p>In this example, we simply move around in the filesystem, picking files in each of these directories. At the end, we drop them all in a specific directory.</p> <p>Define a convenient <code>drop</code> alias:</p> <pre><code>alias drop='drag -d'\ndrag file.txt\ncd /somewhere/else\ndrop\n</code></pre> <p>In this example, we define a <code>drop</code> alias that allows us to actually run <code>drag</code> then <code>drop</code> (instead of <code>drag --drop</code>).</p> Authors <p>Timoth\u00e9e Mazzucotelli / @pawamoy dev@pawamoy.fr</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#104-2025-03-28","title":"1.0.4 - 2025-03-28","text":"<p>Compare with 1.0.3</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Add CSS for symbols (20e891c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#103-2025-03-27","title":"1.0.3 - 2025-03-27","text":"<p>Compare with 1.0.2</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Depend on shellman 1.0.2 (33c34ff by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#102-2025-03-26","title":"1.0.2 - 2025-03-26","text":"<p>Compare with 1.0.1</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<p>Importing from submodules is deprecated, import directly from <code>mkdocstrings_handlers.shell</code> instead.</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix rendering of <code>exit</code> tags (7fdfc66 by Timoth\u00e9e Mazzucotelli). Issue-2</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Move submodules into an internal folder (c6cb633 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#101-2025-03-09","title":"1.0.1 - 2025-03-09","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Depend on mkdocstrings 0.28.3 (88767f0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Import from top-level <code>mkdocstrings</code> module (5e26be7 by Timoth\u00e9e Mazzucotelli).</li> <li>Update code base for mkdocstrings 0.28 (652c6bb by Timoth\u00e9e Mazzucotelli). Discussion-mkdocstrings-727, PR-1</li> </ul>"},{"location":"changelog/#100-2024-10-12","title":"1.0.0 - 2024-10-12","text":"<p>Compare with 0.0.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Make the project public! (5d06482 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#001-2024-05-25","title":"0.0.1 - 2024-05-25","text":"<p>Compare with first commit</p>"},{"location":"changelog/#build_1","title":"Build","text":"<ul> <li>Provide no-op handler for non-insiders contributors (c972f6d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd shell\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocstrings-shell. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>~=0.4, &gt;=0.4</code> <code>0.4.6</code> BSD License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.6.3.1.3.1</code> ISC Jinja2 A very fast and expressive template engine. <code>~=3.0, &gt;=3</code> <code>3.1.6</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2, &gt;=3.6</code> <code>3.7</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29, &gt;=0.28.3</code> <code>0.29.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.8.1.12.0</code> ISC packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.7</code> MIT pymdown-extensions Extension pack for Python Markdown. <code>~=10.2, &gt;=6.3</code> <code>10.14.3</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License shellman Write documentation in comments and render it with templates. <code>&gt;=1.0.2</code> <code>1.0.2</code> ISC six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9, &gt;=4.0</code> <code>4.13.0</code> PSF-2.0 watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License annotated-types Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.3</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.26.6</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>~=0.4, &gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.7.1</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.6.3.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.2</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>~=3.0, &gt;=3</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2, &gt;=3.6</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.5</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.1</code> <code>0.1.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.9+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-redirects A MkDocs plugin for dynamic page redirects to prevent broken links <code>&gt;=1.2</code> <code>1.2.2</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29, &gt;=0.28.3</code> <code>0.29.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.8.1.12.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.7</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydantic Data validation using Python type hints <code>&gt;=2.10</code> <code>2.10.6</code> MIT pydantic_core Core functionality for Pydantic validation and serialization <code>==2.27.2</code> <code>2.27.2</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2, &gt;=6.3</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2015.7</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.11.2</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20250322</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250326</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9, &gt;=4.0</code> <code>4.13.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.3</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>mkdocstrings-shell follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>mkdocstrings-shell Insiders is a private fork of mkdocstrings-shell, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are granted access to this private repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into mkdocstrings-shell and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to all released features that you can start using right away, and which are exclusively available to sponsors. At this moment, there are no Insiders features for this project, but checkout the next funding goals to see what's coming, as well as the feature list for all Insiders projects.</p> <p>Additionally, your sponsorship will give more weight to your upvotes on issues, helping us prioritize work items in our backlog. For more information on how we prioritize work, see this page: Backlog management.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: By default, when you're sponsoring @pawamoy through a GitHub organization, all the publicly visible members of the organization will be invited to join our private repositories. If you wish to only grant access to a subset of users, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub accounts of the users that should be granted access.</p> <p>Tip: to ensure that access is not tied to a particular individual GitHub account, you can create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being granted access to our private repositories, the bot account can create private forks of our private repositories into your own organization, which all members of your organization will have access to.</p> <p>You can cancel your sponsorship anytime.<sup>4</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for mkdocstrings-shell. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or  planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<p>There are no features in this goal for this project. See the features in this goal for all Insiders projects.</p>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<ul> <li> [Project] Shell scripts/libraries handler for mkdocstrings</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use mkdocstrings-shell locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with mkdocstrings-shell. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as mkdocstrings-shell?</p> <p>Yes. Whether you're an individual or a company, you may use mkdocstrings-shell Insiders precisely under the same terms as mkdocstrings-shell, which are given by the ISC license. However, we kindly ask you to respect our fair use policy:</p> <ul> <li>Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, privately fork or mirror it, but please don't make the source code public, as it would counteract the sponsorware strategy.</li> <li>If you cancel your subscription, your access to the private repository is revoked, and you will miss out on all future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks.</li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by mkdocstrings-shell.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use mkdocstrings-shell, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#mkdocstrings-shell-insiders","title":"mkdocstrings-shell Insiders","text":""},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 September 04, 2023","text":"<ul> <li>Release first Insiders version</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>mkdocstrings-shell Insiders is a compatible drop-in replacement for mkdocstrings-shell, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-the-insiders-tool","title":"with the <code>insiders</code> tool","text":"<p><code>insiders</code> is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>mkdocstrings-shell Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/mkdocstrings-shell.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/mkdocstrings-shell.git\n</code></pre> How to get a GitHub personal access token? <p> The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use mkdocstrings-shell Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/mkdocstrings-shell\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e mkdocstrings-shell\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of mkdocstrings-shell which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#mkdocstrings_handlers.shell","title":"shell","text":"<p>Shell handler for mkdocstrings.</p> <p>Modules:</p> <ul> <li> <code>config</code>           \u2013            <p>Deprecated. Import from <code>mkdocstrings_handlers.shell</code> directly.</p> </li> <li> <code>handler</code>           \u2013            <p>Deprecated. Import from <code>mkdocstrings_handlers.shell</code> directly.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ShellConfig</code>           \u2013            <p>Shell handler configuration.</p> </li> <li> <code>ShellHandler</code>           \u2013            <p>The Shell handler class.</p> </li> <li> <code>ShellInputConfig</code>           \u2013            <p>Shell handler configuration.</p> </li> <li> <code>ShellInputOptions</code>           \u2013            <p>Accepted input options.</p> </li> <li> <code>ShellOptions</code>           \u2013            <p>Final options passed as template context.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_handler</code>             \u2013              <p>Simply return an instance of <code>ShellHandler</code>.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellConfig","title":"ShellConfig  <code>dataclass</code>","text":"<pre><code>ShellConfig(options: dict[str, Any] = dict())\n</code></pre> <p>               Bases: <code>ShellInputConfig</code></p> <p>Shell handler configuration.</p> Used by: <ul> <li> <code></code>\u00a0shell <code></code>\u00a0ShellHandler </li> </ul> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>Global options in mkdocs.yml.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellConfig.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: dict[str, Any] = field(default_factory=dict)\n</code></pre> <p>Global options in mkdocs.yml.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellConfig.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellConfig.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler","title":"ShellHandler","text":"<pre><code>ShellHandler(\n    config: ShellConfig, base_dir: Path, **kwargs: Any\n)\n</code></pre> <p>               Bases: <code>BaseHandler</code></p> <p>The Shell handler class.</p> Returned by: <ul> <li> <code></code>\u00a0shell <code></code>\u00a0get_handler </li> </ul> <p>Methods:</p> <ul> <li> <code>collect</code>             \u2013              <p>Collect data from a shell script/library.</p> </li> <li> <code>do_convert_markdown</code>             \u2013              <p>Render Markdown text; for use inside templates.</p> </li> <li> <code>do_heading</code>             \u2013              <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> </li> <li> <code>get_aliases</code>             \u2013              <p>Return the possible aliases for a given identifier.</p> </li> <li> <code>get_extended_templates_dirs</code>             \u2013              <p>Load template extensions for the given handler, return their templates directories.</p> </li> <li> <code>get_headings</code>             \u2013              <p>Return and clear the headings gathered so far.</p> </li> <li> <code>get_inventory_urls</code>             \u2013              <p>Return the URLs (and configuration options) of the inventory files to download.</p> </li> <li> <code>get_options</code>             \u2013              <p>Get the combined (global and local) options.</p> </li> <li> <code>get_templates_dir</code>             \u2013              <p>Return the path to the handler's templates directory.</p> </li> <li> <code>load_inventory</code>             \u2013              <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> </li> <li> <code>render</code>             \u2013              <p>Render the collected data.</p> </li> <li> <code>render_backlinks</code>             \u2013              <p>Render backlinks.</p> </li> <li> <code>teardown</code>             \u2013              <p>Teardown the handler.</p> </li> <li> <code>update_env</code>             \u2013              <p>Update the Jinja environment.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>base_dir</code>           \u2013            <p>The base directory for the handler.</p> </li> <li> <code>config</code>           \u2013            <p>The handler configuration.</p> </li> <li> <code>custom_templates</code>           \u2013            <p>The path to custom templates.</p> </li> <li> <code>domain</code>               (<code>str</code>)           \u2013            <p>The cross-documentation domain/language for this handler.</p> </li> <li> <code>enable_inventory</code>               (<code>bool</code>)           \u2013            <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p> </li> <li> <code>env</code>           \u2013            <p>The Jinja environment.</p> </li> <li> <code>extra_css</code>               (<code>str</code>)           \u2013            <p>Extra CSS.</p> </li> <li> <code>fallback_config</code>               (<code>dict</code>)           \u2013            <p>Fallback configuration when searching anchors for identifiers.</p> </li> <li> <code>fallback_theme</code>               (<code>str</code>)           \u2013            <p>The theme to fallback to.</p> </li> <li> <code>global_options</code>           \u2013            <p>The global options for the handler.</p> </li> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p> </li> <li> <code>mdx</code>           \u2013            <p>The Markdown extensions to use.</p> </li> <li> <code>mdx_config</code>           \u2013            <p>The configuration for the Markdown extensions.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The handler's name.</p> </li> <li> <code>outer_layer</code>               (<code>bool</code>)           \u2013            <p>Whether we're in the outer Markdown conversion layer.</p> </li> <li> <code>theme</code>           \u2013            <p>The selected theme.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir = base_dir\n</code></pre> <p>The base directory for the handler.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre> <p>The handler configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.custom_templates","title":"custom_templates  <code>instance-attribute</code>","text":"<pre><code>custom_templates = custom_templates\n</code></pre> <p>The path to custom templates.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.domain","title":"domain  <code>class-attribute</code>","text":"<pre><code>domain: str = 'shell'\n</code></pre> <p>The cross-documentation domain/language for this handler.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.enable_inventory","title":"enable_inventory  <code>class-attribute</code>","text":"<pre><code>enable_inventory: bool = False\n</code></pre> <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = Environment(\n    autoescape=True,\n    loader=FileSystemLoader(paths),\n    auto_reload=False,\n)\n</code></pre> <p>The Jinja environment.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.extra_css","title":"extra_css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra_css: str = ''\n</code></pre> <p>Extra CSS.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.fallback_config","title":"fallback_config  <code>class-attribute</code>","text":"<pre><code>fallback_config: dict = {}\n</code></pre> <p>Fallback configuration when searching anchors for identifiers.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.fallback_theme","title":"fallback_theme  <code>class-attribute</code>","text":"<pre><code>fallback_theme: str = 'material'\n</code></pre> <p>The theme to fallback to.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.global_options","title":"global_options  <code>instance-attribute</code>","text":"<pre><code>global_options = options\n</code></pre> <p>The global options for the handler.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.md","title":"md  <code>property</code>","text":"<pre><code>md: Markdown\n</code></pre> <p>The Markdown instance.</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>When the Markdown instance is not set yet.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.mdx","title":"mdx  <code>instance-attribute</code>","text":"<pre><code>mdx = mdx\n</code></pre> <p>The Markdown extensions to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.mdx_config","title":"mdx_config  <code>instance-attribute</code>","text":"<pre><code>mdx_config = mdx_config\n</code></pre> <p>The configuration for the Markdown extensions.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name: str = 'shell'\n</code></pre> <p>The handler's name.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.outer_layer","title":"outer_layer  <code>property</code>","text":"<pre><code>outer_layer: bool\n</code></pre> <p>Whether we're in the outer Markdown conversion layer.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.theme","title":"theme  <code>instance-attribute</code>","text":"<pre><code>theme = theme\n</code></pre> <p>The selected theme.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.collect","title":"collect","text":"<pre><code>collect(\n    identifier: str, options: ShellOptions\n) -&gt; CollectorItem\n</code></pre> <p>Collect data from a shell script/library.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.do_convert_markdown","title":"do_convert_markdown","text":"<pre><code>do_convert_markdown(\n    text: str,\n    heading_level: int,\n    html_id: str = \"\",\n    *,\n    strip_paragraph: bool = False,\n    autoref_hook: AutorefsHookInterface | None = None,\n) -&gt; Markup\n</code></pre> <p>Render Markdown text; for use inside templates.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text to convert.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The base heading level to start all Markdown headings from.</p> </li> <li> <code>html_id</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The HTML id of the element that's considered the parent of this element.</p> </li> <li> <code>strip_paragraph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to exclude the <code>&lt;p&gt;</code> tag from around the whole output.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.do_heading","title":"do_heading","text":"<pre><code>do_heading(\n    content: Markup,\n    heading_level: int,\n    *,\n    role: str | None = None,\n    hidden: bool = False,\n    toc_label: str | None = None,\n    **attributes: str,\n) -&gt; Markup\n</code></pre> <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>Markup</code>)           \u2013            <p>The HTML within the heading.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The level of heading (e.g. 3 -&gt; <code>h3</code>).</p> </li> <li> <code>role</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional role for the object bound to this heading.</p> </li> <li> <code>hidden</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, only register it for the table of contents, don't render anything.</p> </li> <li> <code>toc_label</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The title to use in the table of contents ('data-toc-label' attribute).</p> </li> <li> <code>**attributes</code>               (<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Any extra HTML attributes of the heading.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.get_aliases","title":"get_aliases","text":"<pre><code>get_aliases(identifier: str) -&gt; tuple[str, ...]\n</code></pre> <p>Return the possible aliases for a given identifier.</p> <p>Parameters:</p> <ul> <li> <code>identifier</code>               (<code>str</code>)           \u2013            <p>The identifier to get the aliases of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>A tuple of strings - aliases.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.get_extended_templates_dirs","title":"get_extended_templates_dirs","text":"<pre><code>get_extended_templates_dirs(handler: str) -&gt; list[Path]\n</code></pre> <p>Load template extensions for the given handler, return their templates directories.</p> <p>Parameters:</p> <ul> <li> <code>handler</code>               (<code>str</code>)           \u2013            <p>The name of the handler to get the extended templates directory of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>The extensions templates directories.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.get_headings","title":"get_headings","text":"<pre><code>get_headings() -&gt; Sequence[Element]\n</code></pre> <p>Return and clear the headings gathered so far.</p> <p>Returns:</p> <ul> <li> <code>Sequence[Element]</code>           \u2013            <p>A list of HTML elements.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.get_inventory_urls","title":"get_inventory_urls","text":"<pre><code>get_inventory_urls() -&gt; list[tuple[str, dict[str, Any]]]\n</code></pre> <p>Return the URLs (and configuration options) of the inventory files to download.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.get_options","title":"get_options","text":"<pre><code>get_options(\n    local_options: Mapping[str, Any],\n) -&gt; HandlerOptions\n</code></pre> <p>Get the combined (global and local) options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.get_templates_dir","title":"get_templates_dir","text":"<pre><code>get_templates_dir(handler: str | None = None) -&gt; Path\n</code></pre> <p>Return the path to the handler's templates directory.</p> <p>Override to customize how the templates directory is found.</p> <p>Parameters:</p> <ul> <li> <code>handler</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The name of the handler to get the templates directory of.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When no such handler is installed.</p> </li> <li> <code>FileNotFoundError</code>             \u2013            <p>When the templates directory cannot be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The templates directory path.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.load_inventory","title":"load_inventory  <code>classmethod</code>","text":"<pre><code>load_inventory(\n    in_file: BinaryIO,\n    url: str,\n    base_url: str | None = None,\n    **kwargs: Any,\n) -&gt; Iterator[tuple[str, str]]\n</code></pre> <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>Parameters:</p> <ul> <li> <code>in_file</code>               (<code>BinaryIO</code>)           \u2013            <p>The binary file-like object to read the inventory from.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p> </li> <li> <code>base_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The URL that this inventory's sub-paths are relative to.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Ignore additional arguments passed from the config.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>tuple[str, str]</code>           \u2013            <p>Tuples of (item identifier, item URL).</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.render","title":"render","text":"<pre><code>render(data: CollectorItem, options: ShellOptions) -&gt; str\n</code></pre> <p>Render the collected data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.render_backlinks","title":"render_backlinks","text":"<pre><code>render_backlinks(\n    backlinks: Mapping[str, Iterable[Backlink]],\n) -&gt; str\n</code></pre> <p>Render backlinks.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.teardown","title":"teardown","text":"<pre><code>teardown() -&gt; None\n</code></pre> <p>Teardown the handler.</p> <p>This method should be implemented to, for example, terminate a subprocess that was started when creating the handler instance.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellHandler.update_env","title":"update_env","text":"<pre><code>update_env(config: MkDocsConfig) -&gt; None\n</code></pre> <p>Update the Jinja environment.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputConfig","title":"ShellInputConfig  <code>dataclass</code>","text":"<pre><code>ShellInputConfig(\n    options: Annotated[\n        ShellInputOptions,\n        _Field(\n            description=\"Configuration options for collecting and rendering objects.\"\n        ),\n    ] = ShellInputOptions(),\n)\n</code></pre> <p>Shell handler configuration.</p> Subclassed by: <ul> <li> <code></code>\u00a0shell <code></code>\u00a0ShellConfig </li> </ul> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>options</code>               (<code>Annotated[ShellInputOptions, _Field(description='Configuration options for collecting and rendering objects.')]</code>)           \u2013            <p>Configuration options for collecting and rendering objects.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputConfig.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: Annotated[\n    ShellInputOptions,\n    _Field(\n        description=\"Configuration options for collecting and rendering objects.\"\n    ),\n] = field(default_factory=ShellInputOptions)\n</code></pre> <p>Configuration options for collecting and rendering objects.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputConfig.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputConfig.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions","title":"ShellInputOptions  <code>dataclass</code>","text":"<pre><code>ShellInputOptions(\n    extra: Annotated[\n        dict[str, Any],\n        _Field(\n            group=\"general\", description=\"Extra options.\"\n        ),\n    ] = dict(),\n    heading: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated heading of the root object.\",\n        ),\n    ] = \"\",\n    heading_level: Annotated[\n        int,\n        _Field(\n            group=\"headings\",\n            description=\"The initial heading level to use.\",\n        ),\n    ] = 2,\n    show_symbol_type_heading: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n        ),\n    ] = False,\n    show_symbol_type_toc: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n        ),\n    ] = False,\n    toc_label: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated toc label of the root object.\",\n        ),\n    ] = \"\",\n)\n</code></pre> <p>Accepted input options.</p> Subclassed by: <ul> <li> <code></code>\u00a0shell <code></code>\u00a0ShellOptions </li> </ul> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>extra</code>               (<code>Annotated[dict[str, Any], _Field(group='general', description='Extra options.')]</code>)           \u2013            <p>Extra options.</p> </li> <li> <code>heading</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated heading of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated heading of the root object.</p> </li> <li> <code>heading_level</code>               (<code>Annotated[int, _Field(group='headings', description='The initial heading level to use.')]</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in headings (e.g. mod, class, meth, func and attr).')]</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).')]</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p> </li> <li> <code>toc_label</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated toc label of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated toc label of the root object.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: Annotated[\n    dict[str, Any],\n    _Field(group=\"general\", description=\"Extra options.\"),\n] = field(default_factory=dict)\n</code></pre> <p>Extra options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.heading","title":"heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated heading of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated heading of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.heading_level","title":"heading_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading_level: Annotated[\n    int,\n    _Field(\n        group=\"headings\",\n        description=\"The initial heading level to use.\",\n    ),\n] = 2\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.show_symbol_type_heading","title":"show_symbol_type_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_heading: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.show_symbol_type_toc","title":"show_symbol_type_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_toc: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.toc_label","title":"toc_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toc_label: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated toc label of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellInputOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions","title":"ShellOptions  <code>dataclass</code>","text":"<pre><code>ShellOptions(\n    extra: Annotated[\n        dict[str, Any],\n        _Field(\n            group=\"general\", description=\"Extra options.\"\n        ),\n    ] = dict(),\n    heading: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated heading of the root object.\",\n        ),\n    ] = \"\",\n    heading_level: Annotated[\n        int,\n        _Field(\n            group=\"headings\",\n            description=\"The initial heading level to use.\",\n        ),\n    ] = 2,\n    show_symbol_type_heading: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n        ),\n    ] = False,\n    show_symbol_type_toc: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n        ),\n    ] = False,\n    toc_label: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated toc label of the root object.\",\n        ),\n    ] = \"\",\n)\n</code></pre> <p>               Bases: <code>ShellInputOptions</code></p> <p>Final options passed as template context.</p> Used by: <ul> <li> <code></code>\u00a0shell <code></code>\u00a0ShellHandler <ul> <li> <code></code>\u00a0collect </li> <li> <code></code>\u00a0render </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>extra</code>               (<code>Annotated[dict[str, Any], _Field(group='general', description='Extra options.')]</code>)           \u2013            <p>Extra options.</p> </li> <li> <code>heading</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated heading of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated heading of the root object.</p> </li> <li> <code>heading_level</code>               (<code>Annotated[int, _Field(group='headings', description='The initial heading level to use.')]</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in headings (e.g. mod, class, meth, func and attr).')]</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).')]</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p> </li> <li> <code>toc_label</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated toc label of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated toc label of the root object.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: Annotated[\n    dict[str, Any],\n    _Field(group=\"general\", description=\"Extra options.\"),\n] = field(default_factory=dict)\n</code></pre> <p>Extra options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.heading","title":"heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated heading of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated heading of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.heading_level","title":"heading_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading_level: Annotated[\n    int,\n    _Field(\n        group=\"headings\",\n        description=\"The initial heading level to use.\",\n    ),\n] = 2\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.show_symbol_type_heading","title":"show_symbol_type_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_heading: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.show_symbol_type_toc","title":"show_symbol_type_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_toc: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.toc_label","title":"toc_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toc_label: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated toc label of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.ShellOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.shell.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    *,\n    handler_config: MutableMapping[str, Any],\n    tool_config: MkDocsConfig,\n    **kwargs: Any,\n) -&gt; ShellHandler\n</code></pre> <p>Simply return an instance of <code>ShellHandler</code>.</p> <p>Parameters:</p> <ul> <li> <code>handler_config</code>               (<code>MutableMapping[str, Any]</code>)           \u2013            <p>The handler configuration.</p> </li> <li> <code>tool_config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The tool (SSG) configuration.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments for the base handler constructor.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ShellHandler</code>           \u2013            <p>An instance of the handler.</p> </li> </ul>"},{"location":"usage/customization/","title":"Customization","text":"<p>It is possible to customize the output of the generated documentation with CSS and/or by overriding templates.</p>"},{"location":"usage/customization/#css-classes","title":"CSS classes","text":"<p>Our templates add CSS classes to many HTML elements to make it possible for users to customize the resulting look and feel.</p> <p>To add CSS rules and style mkdocstrings' output, put them in a CSS file in your docs folder, for example in <code>docs/css/mkdocstrings.css</code>, and reference this file in MkDocs' <code>extra_css</code> configuration option:</p> mkdocs.yml<pre><code>extra_css:\n- css/mkdocstrings.css\n</code></pre>"},{"location":"usage/customization/#symbol-types","title":"Symbol types","text":""},{"location":"usage/customization/#colors","title":"Colors","text":"<p>You can customize the colors of the symbol types (see <code>show_symbol_type_heading</code> and <code>show_symbol_type_toc</code>) by overriding the values of our CSS variables, for example:</p> docs/css/mkdocstrings.css<pre><code>[data-md-color-scheme=\"default\"] {\n  --doc-symbol-sh-function-fg-color: #8250df;\n  --doc-symbol-sh-script-fg-color: #0550ae;\n\n  --doc-symbol-sh-function-bg-color: #8250df1a;\n  --doc-symbol-sh-script-bg-color: #0550ae1a;\n}\n\n[data-md-color-scheme=\"slate\"] {\n  --doc-symbol-sh-function-fg-color: #d2a8ff;\n  --doc-symbol-sh-script-fg-color: #79c0ff;\n\n  --doc-symbol-sh-function-bg-color: #d2a8ff1a;\n  --doc-symbol-sh-script-bg-color: #79c0ff1a;\n}\n</code></pre> <p>The <code>[data-md-color-scheme=\"*\"]</code> selectors work with the [Material for MkDocs] theme. If you are using another theme, adapt the selectors to this theme if it supports light and dark themes, otherwise just override the variables at root level:</p> docs/css/mkdocstrings.css<pre><code>:root {\n  --doc-symbol-sh-function-fg-color: #d1b619;\n  --doc-symbol-sh-function-bg-color: #d1b6191a;\n}\n</code></pre> <p>Preview</p> <p>     Try cycling through the themes to see the colors for each theme:     <code></code>"},{"location":"usage/customization/#names","title":"Names","text":"<p>You can also change the actual symbol names. For example, to use single letters instead of truncated types:</p> docs/css/mkdocstrings.css<pre><code>.doc-symbol-sh-function::after {\n  content: \"F\";\n}\n.doc-symbol-sh-script::after {\n  content: \"S\";\n}\n</code></pre> <p>Preview</p> <ul> <li>Function: <code></code></li> <li>Script: <code></code></li> </ul>"},{"location":"usage/customization/#templates","title":"Templates","text":"<p>Templates are organized into the following tree:</p> <pre><code>\ud83d\udcc1 theme/\n\u251c\u2500\u2500  function.html.jinja\n\u2514\u2500\u2500  script.html.jinja\n</code></pre> <p>See them in the repository. See the general mkdocstrings documentation to learn how to override them: https://mkdocstrings.github.io/theming/#templates.</p> <p>Each one of these templates extends a base version in <code>theme/_base</code>. Example:</p> theme/script.html.jinja<pre><code>{% extends \"_base/script.html.jinja\" %}\n</code></pre> <p>Some of these templates define Jinja blocks. allowing to customize only parts of a template without having to fully copy-paste it into your project:</p> templates/theme/script.html<pre><code>{% extends \"_base/script.html\" %}\n{% block contents scoped %}\n  {{ block.super }}\n  Additional contents\n{% endblock contents %}\n</code></pre>"},{"location":"usage/configuration/","title":"Configuration","text":""},{"location":"usage/configuration/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      shell:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: your-script\n    options:\n      do_something: false\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: various options that do not fit in the other categories</li> <li>Headings options: options related to headings and the table of contents     (or sidebar, depending on the theme used)</li> </ul>"},{"location":"usage/configuration/general/","title":"General options","text":""},{"location":"usage/configuration/general/#extra","title":"<code>extra</code>","text":"<ul> <li> Type <code>dict</code> <code>{}</code></li> </ul> <p>The <code>extra</code> option lets you inject additional variables into the Jinja context used when rendering templates. You can then use this extra context in your overridden templates.</p> <p>Local <code>extra</code> options will be merged into the global <code>extra</code> option:</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      shell:\n        options:\n          extra:\n            hello: world\n</code></pre> in docs/some_page.md (local configuration)<pre><code>::: your-script\n    options:\n      extra:\n        foo: bar\n</code></pre> <p>...will inject both <code>hello</code> and <code>foo</code> into the Jinja context when rendering <code>your-script</code>.</p>"},{"location":"usage/configuration/headings/","title":"Headings options","text":""},{"location":"usage/configuration/headings/#heading","title":"<code>heading</code>","text":"<ul> <li> Type <code>str</code> <code>\"\"</code></li> </ul> <p>A custom string to use as the heading of the root object (i.e. the object specified directly after the identifier <code>:::</code>). This will override the default heading generated by the plugin. See also the <code>toc_label</code> option.</p> <p>Not advised to be used as a global configuration option</p> <p> This option is not advised to be used as a global configuration option, as it will override the default heading for all objects. It is recommended to use it only in specific cases where you want to override the heading for a specific object.</p> in docs/some_page.md (local configuration)<pre><code>::: your-script\n    options:\n      heading: \"My fancy module\"\n</code></pre> <p></p>"},{"location":"usage/configuration/headings/#heading_level","title":"<code>heading_level</code>","text":"<ul> <li> Type <code>int</code> <code>2</code></li> </ul> <p>The initial heading level to use.</p> <p>When injecting documentation for an object, the object itself and its members are rendered. For each layer of objects, we increase the heading level by 1.</p> <p>The initial heading level will be used for the first layer. If you set it to 3, then headings will start with <code>&lt;h3&gt;</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      shell:\n        options:\n          heading_level: 2\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your-script\n    options:\n      heading_level: 3\n</code></pre> <p>Preview</p> With level 3 and root headingWith level 3, without root heading <code>script</code> (3) <p>Docstring of the script.</p> <code>functionA</code> (4) <p>Docstring of function A.</p> <p>Docstring of the script.</p> <code>functionA</code> (3) <p>Docstring of function A.</p> <p></p>"},{"location":"usage/configuration/headings/#show_symbol_type_heading","title":"<code>show_symbol_type_heading</code><code></code> <code>function</code><code>function</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in headings.</p> <p>This option will prefix headings with <code></code> or <code></code> types. See also <code>show_symbol_type_toc</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      shell:\n        options:\n          show_symbol_type_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your-script\n    options:\n      show_symbol_type_heading: false\n</code></pre> <p>Preview</p> With symbol type in headingsWithout symbol type in headings <code></code> <code>script</code> <p>Docstring of the script.</p> <p>Docstring of the function.</p> <code>script</code> <p>Docstring of the script.</p> <p>Docstring of the function.</p> <p></p>"},{"location":"usage/configuration/headings/#show_symbol_type_toc","title":"<code>show_symbol_type_toc</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in the Table of Contents.</p> <p>This option will prefix items in the ToC with <code></code> or <code></code> types. See also <code>show_symbol_type_heading</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      shell:\n        options:\n          show_symbol_type_toc: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your-script\n    options:\n      show_symbol_type_toc: false\n</code></pre> <p>Preview</p> With symbol type in ToCWithout symbol type in ToC <ul> <li><code></code> script</li> <li><code></code> function</li> </ul> <ul> <li>script</li> <li>function</li> </ul> <p></p>"},{"location":"usage/configuration/headings/#toc_label","title":"<code>toc_label</code>","text":"<ul> <li> Type <code>str</code> <code>\"\"</code></li> </ul> <p>A custom string to use as the label in the Table of Contents for the root object (i.e. the one specified directly after the identifier <code>:::</code>). This will override the default label generated by the plugin. See also the <code>heading</code> option.</p> <p>Not advised to be used as a global configuration option</p> <p> This option is not advised to be used as a global configuration option, as it will override the default label for all objects. It is recommended to use it only in specific cases where you want to override the label for a specific object.</p> <p>Use with/without <code>heading</code></p> <p> If you use this option without specifying a custom <code>heading</code>, the default heading will be used in the page, but the label in the Table of Contents will be the one you specified. By providing both an option for <code>heading</code> and <code>toc_label</code>, we leave the customization entirely up to you.</p> in docs/some_page.md (local configuration)<pre><code>::: your-script\n    options:\n      heading: \"My fancy script\"\n      toc_label: \"My fancy script\"\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}